//	public void mousePressed(MouseEvent e) {
//		if (isSolved)
//			return;
//		// System.out.println("pressed");
//		int x = e.getX();
//		int y = e.getY();
//		ArrayList<Integer> chosen = new ArrayList<Integer>();
//		// System.out.println(x);
//		// System.out.println(y);
//		for (int i = 0; i < unusedPieceComponents.size(); i++) {
//			PieceComponent p = unusedPieceComponents.get(i);
//			if (x > p.getX() + PIECE_SIZE / 3
//					&& x < p.getX() + PIECE_SIZE * 4 / 3
//					&& y > p.getY() + PIECE_SIZE / 3
//					&& y < p.getY() + PIECE_SIZE * 4 / 3) { // made a change in
//															// calculation here
//				p.setAttached(true);
//				chosen.add(i);
//			}
//		}
//		while (chosen.size() > 1) {
//			unusedPieceComponents.get(chosen.get(0)).setAttached(false);
//			chosen.remove(0);
//		}
//		for (int j = 0; j < usedPieceComponents.size(); j++) {
//			PieceComponent p = usedPieceComponents.get(j);
//			if (x > p.getX() + PIECE_SIZE / 3
//					&& x < p.getX() + PIECE_SIZE * 4 / 3
//					&& y > p.getY() + PIECE_SIZE / 3
//					&& y < p.getY() + PIECE_SIZE * 4 / 3)
//				p.setAttached(true);
//			int start = (0 - pu.getCols() / 2) * PIECE_SIZE + getWidth() / 2
//					- 50;
//			pu.getPiece((y - start) / PIECE_SIZE, (x - start) / PIECE_SIZE);
//			usedPieceComponents.remove(p);
//			unusedPieceComponents.add(p);
//		}
//	}
//
//	@Override
//	public void mouseReleased(MouseEvent e) {
//		if (isSolved)
//			return;
//
//		// System.out.println("pressed");
//		int x = e.getX();
//		int y = e.getY();
//		// System.out.println(x);
//		// System.out.println(y);
//		boolean isSet = false; // what does this even do??
//		for (int k = 0; k < unusedPieceComponents.size(); k++) {
//			PieceComponent p = unusedPieceComponents.get(k);
//			if (p.isAttached()) {
//				p.setAttached(false);
//				for (int i = 0; i < pu.getCols() && !isSet; i++) {
//					for (int j = 0; j < pu.getRows() && !isSet; j++) {
//						int xPos = (i - pu.getCols() / 2) * PIECE_SIZE
//								+ getWidth() / 2 - 50;
//						int yPos = (j - pu.getRows() / 2) * PIECE_SIZE
//								+ getHeight() / 2 - 50;
//						if (x > xPos && x < xPos + PIECE_SIZE && y > yPos
//								&& y < yPos + PIECE_SIZE) {
//							isSet = true;
//							if (pu.doesFit(j, i, p)) {
//								PieceComponent pc = (PieceComponent) pu
//										.setPiece(j, i, p);
//								p.setX(xPos - 23);
//								p.setY(yPos - 23);
//								unusedPieceComponents.remove(p);
//								usedPieceComponents.add(p);
//								if (pc != null) {
//									unusedPieceComponents.add(pc);
//									usedPieceComponents.remove(pc);
//								}
//							}
//						}
//					}
//				}
//			}
//		}
//		for (int k = 0; k < usedPieceComponents.size(); k++) {
//			PieceComponent p = usedPieceComponents.get(k);
//			if (p.isAttached()) {
//				p.setAttached(false);
//				for (int i = 0; i < pu.getCols() && !isSet; i++) {
//					for (int j = 0; j < pu.getRows() && !isSet; j++) {
//						int xPos = (i - pu.getCols() / 2) * PIECE_SIZE
//								+ getWidth() / 2 - 50;
//						int yPos = (j - pu.getRows() / 2) * PIECE_SIZE
//								+ getHeight() / 2 - 50;
//						if (x > xPos && x < xPos + PIECE_SIZE && y > yPos
//								&& y < yPos + PIECE_SIZE) {
//							isSet = true;
//							// pu.removePiece(j, i);//added this, fixed the
//							// bouncing back if you picked up and put in same
//							// spot JK THIS IS NOT A GOOD FIX
//							// because it removes the piece from the spot you're
//							// checking...i was trying to remove the piece that
//							// you're actually
//							// comparing against the others from the Arraylist,
//							// unfortunately we don't have a way yet to link the
//							// x and y of the
//							// component and the row and col of the Piece.
//
//							if (pu.doesFit(j, i, p)) {
//								PieceComponent pc = (PieceComponent) pu
//										.setPiece(j, i, p);
//								p.setX(xPos - 23);
//								p.setY(yPos - 23);
//								unusedPieceComponents.remove(p);
//								usedPieceComponents.add(p);
//								if (pc != null) {
//									unusedPieceComponents.add(pc);
//									usedPieceComponents.remove(pc);
//
//								}
//							}
//						}
//					}
//				}
//			}
//		}
//		repaint();
//	}
//
//	@Override
//	public void mouseDragged(MouseEvent e) {
//		if (isSolved)
//			return;
//
//		int x = e.getX();
//		int y = e.getY();
//		// System.out.println(x);
//		// System.out.println(y);
//		for (int k = 0; k < unusedPieceComponents.size(); k++) {
//			PieceComponent p = unusedPieceComponents.get(k);
//			if (p.isAttached()) {
//				// System.out.println(p.getX());
//				p.setX(x - (int) (PIECE_SIZE * 0.8));
//				// System.out.println(p.getX());
//				p.setY(y - (int) (PIECE_SIZE * 0.8));
//			}
//		}
//		for (int k = 0; k < usedPieceComponents.size(); k++) {
//			PieceComponent p = usedPieceComponents.get(k);
//			if (p.isAttached()) {
//				// System.out.println(p.getX());
//				p.setX(x - PIECE_SIZE / 2);
//				// System.out.println(p.getX());
//				p.setY(y - PIECE_SIZE / 2);
//			}
//		}
//		repaint();
//	}